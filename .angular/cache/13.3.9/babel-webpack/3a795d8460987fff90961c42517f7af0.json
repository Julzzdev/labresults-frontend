{"ast":null,"code":"import _asyncToGenerator from \"/Users/kar/Documents/projects/freelance/labresults-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from 'axios';\nimport { environment } from 'src/environments/environment';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nexport class MasterService {\n  constructor() {\n    var _this = this;\n\n    this.host = environment.host;\n    this.headers = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // functions\n\n    this.get = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (section) {\n        return yield axios.get(section, _this.headers);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(); // control request\n\n\n    this.requestManage = res => {\n      debugger;\n\n      if (res) {\n        if (res == 200) {\n          return res.data;\n        } else {\n          this.showAlert('We had a problem', res.error, 'warning');\n        }\n      } else {\n        this.showAlert('API no response', 'The api did not respond', 'warning');\n      }\n    }; // functions\n\n\n    this.showAlert = (title, text, icon) => {\n      Swal.fire({\n        title: title,\n        text: text,\n        icon: icon,\n        confirmButtonText: 'Continue'\n      });\n    }; // confirm alert\n\n\n    this.confirmAlert = (title, text, button, callback) => {\n      Swal.fire({\n        title: title,\n        text: text,\n        icon: 'question',\n        showCancelButton: true,\n        confirmButtonText: button\n      }).then(result => {\n        /* Read more about isConfirmed, isDenied below */\n        if (result.isConfirmed) {\n          Swal.fire('Success!', '', 'success');\n          callback(true);\n        }\n      });\n    };\n  }\n\n}\n\nMasterService.ɵfac = function MasterService_Factory(t) {\n  return new (t || MasterService)();\n};\n\nMasterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MasterService,\n  factory: MasterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/kar/Documents/projects/freelance/labresults-frontend/src/app/services/master.service.ts"],"names":["axios","environment","Swal","i0","MasterService","constructor","host","headers","get","section","requestManage","res","data","showAlert","error","title","text","icon","fire","confirmButtonText","confirmAlert","button","callback","showCancelButton","then","result","isConfirmed","ɵfac","MasterService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,GAAG;AAAA;;AACV,SAAKC,IAAL,GAAYL,WAAW,CAACK,IAAxB;AACA,SAAKC,OAAL,GAAe;AAAEA,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf,CAFU,CAGV;;AACA,SAAKC,GAAL;AAAA,mCAAW,WAAOC,OAAP,EAAmB;AAC1B,qBAAaT,KAAK,CAACQ,GAAN,CAAUC,OAAV,EAAmB,KAAI,CAACF,OAAxB,CAAb;AACH,OAFD;;AAAA;AAAA;AAAA;AAAA,QAJU,CAOV;;;AACA,SAAKG,aAAL,GAAsBC,GAAD,IAAS;AAC1B;;AACA,UAAIA,GAAJ,EAAS;AACL,YAAIA,GAAG,IAAI,GAAX,EAAgB;AACZ,iBAAOA,GAAG,CAACC,IAAX;AACH,SAFD,MAGK;AACD,eAAKC,SAAL,CAAe,kBAAf,EAAmCF,GAAG,CAACG,KAAvC,EAA8C,SAA9C;AACH;AACJ,OAPD,MAQK;AACD,aAAKD,SAAL,CAAe,iBAAf,EAAkC,yBAAlC,EAA6D,SAA7D;AACH;AACJ,KAbD,CARU,CAsBV;;;AACA,SAAKA,SAAL,GAAiB,CAACE,KAAD,EAAQC,IAAR,EAAcC,IAAd,KAAuB;AACpCf,MAAAA,IAAI,CAACgB,IAAL,CAAU;AACNH,QAAAA,KAAK,EAAEA,KADD;AAENC,QAAAA,IAAI,EAAEA,IAFA;AAGNC,QAAAA,IAAI,EAAEA,IAHA;AAINE,QAAAA,iBAAiB,EAAE;AAJb,OAAV;AAMH,KAPD,CAvBU,CA+BV;;;AACA,SAAKC,YAAL,GAAoB,CAACL,KAAD,EAAQC,IAAR,EAAcK,MAAd,EAAsBC,QAAtB,KAAmC;AACnDpB,MAAAA,IAAI,CAACgB,IAAL,CAAU;AACNH,QAAAA,KAAK,EAAEA,KADD;AAENC,QAAAA,IAAI,EAAEA,IAFA;AAGNC,QAAAA,IAAI,EAAE,UAHA;AAINM,QAAAA,gBAAgB,EAAE,IAJZ;AAKNJ,QAAAA,iBAAiB,EAAEE;AALb,OAAV,EAMGG,IANH,CAMSC,MAAD,IAAY;AAChB;AACA,YAAIA,MAAM,CAACC,WAAX,EAAwB;AACpBxB,UAAAA,IAAI,CAACgB,IAAL,CAAU,UAAV,EAAsB,EAAtB,EAA0B,SAA1B;AACAI,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,OAZD;AAaH,KAdD;AAeH;;AAhDsB;;AAkD3BlB,aAAa,CAACuB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIzB,aAAV,GAAP;AAAoC,CAA7F;;AACAA,aAAa,CAAC0B,KAAd,GAAsB,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE5B,aAAT;AAAwB6B,EAAAA,OAAO,EAAE7B,aAAa,CAACuB,IAA/C;AAAqDO,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import axios from 'axios';\nimport { environment } from 'src/environments/environment';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nexport class MasterService {\n    constructor() {\n        this.host = environment.host;\n        this.headers = { headers: { 'Content-Type': 'application/json' } };\n        // functions\n        this.get = async (section) => {\n            return await axios.get(section, this.headers);\n        };\n        // control request\n        this.requestManage = (res) => {\n            debugger;\n            if (res) {\n                if (res == 200) {\n                    return res.data;\n                }\n                else {\n                    this.showAlert('We had a problem', res.error, 'warning');\n                }\n            }\n            else {\n                this.showAlert('API no response', 'The api did not respond', 'warning');\n            }\n        };\n        // functions\n        this.showAlert = (title, text, icon) => {\n            Swal.fire({\n                title: title,\n                text: text,\n                icon: icon,\n                confirmButtonText: 'Continue'\n            });\n        };\n        // confirm alert\n        this.confirmAlert = (title, text, button, callback) => {\n            Swal.fire({\n                title: title,\n                text: text,\n                icon: 'question',\n                showCancelButton: true,\n                confirmButtonText: button,\n            }).then((result) => {\n                /* Read more about isConfirmed, isDenied below */\n                if (result.isConfirmed) {\n                    Swal.fire('Success!', '', 'success');\n                    callback(true);\n                }\n            });\n        };\n    }\n}\nMasterService.ɵfac = function MasterService_Factory(t) { return new (t || MasterService)(); };\nMasterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MasterService, factory: MasterService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}